generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model authors {
  author_id    Int            @id @default(autoincrement())
  name         String         @db.VarChar(100) @unique
  bio          String?
  book_authors book_authors[]
}

model book_authors {
  book_id   Int
  author_id Int
  authors   authors @relation(fields: [author_id], references: [author_id], onDelete: Cascade, onUpdate: NoAction)
  books     books   @relation(fields: [book_id], references: [book_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([book_id, author_id])
}

model book_categories {
  book_id     Int
  category_id Int
  books       books      @relation(fields: [book_id], references: [book_id], onDelete: Cascade, onUpdate: NoAction)
  categories  categories @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([book_id, category_id])
}

model books {
  book_id          Int                @id @default(autoincrement())
  title            String             @db.VarChar(150)
  description      String?
  isbn             String?            @unique @db.VarChar(20)
  publisher        String?            @db.VarChar(100)
  published_year   Int?
  cover_url        String?            @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  book_authors     book_authors[]
  book_categories  book_categories[]
  collection_books collection_books[]
  reviews          reviews[]
  user_books       user_books[]
}

model categories {
  category_id        Int               @id @default(autoincrement())
  name               String            @unique @db.VarChar(50)
  description        String?
  parent_category_id Int?
  book_categories    book_categories[]
  categories         categories?       @relation("categoriesTocategories", fields: [parent_category_id], references: [category_id], onUpdate: NoAction)
  other_categories   categories[]      @relation("categoriesTocategories")
}

model collection_books {
  collection_id      Int
  book_id            Int
  books              books              @relation(fields: [book_id], references: [book_id], onDelete: Cascade, onUpdate: NoAction)
  custom_collections custom_collections @relation(fields: [collection_id], references: [collection_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([collection_id, book_id])
}

model custom_collections {
  collection_id    Int                @id @default(autoincrement())
  user_id          Int
  name             String             @db.VarChar(100)
  description      String?
  collection_books collection_books[]
  users            users              @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  review_id  Int       @id @default(autoincrement())
  book_id    Int
  user_id    Int
  rating     Int       @db.SmallInt
  comment    String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  books      books     @relation(fields: [book_id], references: [book_id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model user_books {
  user_book_id Int         @id @default(autoincrement())
  user_id      Int
  book_id      Int
  status       book_status
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?   @default(now()) @db.Timestamptz(6)
  books        books       @relation(fields: [book_id], references: [book_id], onDelete: Cascade, onUpdate: NoAction)
  users        users       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model user_profile {
  user_id    Int     @id
  first_name String? @db.VarChar(50)
  last_name  String? @db.VarChar(50)
  bio        String?
  avatar_url String? @db.VarChar(255)
  users      users   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  user_id            Int                  @id @default(autoincrement())
  username           String               @unique @db.VarChar(50)
  email              String               @unique @db.VarChar(100)
  password_hash      String               @db.VarChar(255)
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  custom_collections custom_collections[]
  reviews            reviews[]
  user_books         user_books[]
  user_profile       user_profile?
}

enum book_status {
  want_to_read
  reading
  read
}
